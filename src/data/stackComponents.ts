import type { StackComponent } from '../types/stackFinder';

export const STACK_COMPONENTS: StackComponent[] = [
  // ML Frameworks
  {
    id: 'pytorch',
    name: 'PyTorch',
    category: 'ml-framework',
    description: 'Dynamic neural network framework with strong research community and production capabilities',
    supportedLanguages: ['python', 'cpp'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'speech-recognition', 'generative-ai', 'recommendation-systems'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed'],
    deploymentTargets: ['cloud', 'on-premise', 'edge'],
    minBudgetRange: 'minimal',
    learningCurve: 'moderate',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['medium', 'high', 'very-high'],
    supportedDataTypes: ['text', 'images', 'audio', 'video', 'tabular', 'multimodal'],
    supportedDataSizes: ['small', 'medium', 'large', 'very-large'],
    complianceSupport: ['none', 'gdpr', 'hipaa'],
    securityFeatures: ['basic', 'standard', 'high'],
    vendor: 'Meta',
    license: 'open-source',
    documentationUrl: 'https://pytorch.org/docs/',
    githubUrl: 'https://github.com/pytorch/pytorch',
    websiteUrl: 'https://pytorch.org/',
    integrationComplexity: 'moderate',
    dependencies: ['numpy', 'cuda'],
    alternatives: ['tensorflow', 'jax'],
    popularityScore: 9,
    communitySize: 'very-large',
    lastUpdated: '2024-01-15'
  },
  {
    id: 'tensorflow',
    name: 'TensorFlow',
    category: 'ml-framework',
    description: 'Production-ready ML framework with comprehensive ecosystem and deployment tools',
    supportedLanguages: ['python', 'javascript', 'java', 'cpp', 'go'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'speech-recognition', 'recommendation-systems', 'time-series-forecasting'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed', 'cloud-native'],
    deploymentTargets: ['cloud', 'on-premise', 'edge', 'mobile'],
    minBudgetRange: 'minimal',
    learningCurve: 'steep',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['medium', 'high', 'very-high'],
    supportedDataTypes: ['text', 'images', 'audio', 'video', 'tabular', 'time-series'],
    supportedDataSizes: ['small', 'medium', 'large', 'very-large'],
    complianceSupport: ['none', 'gdpr', 'hipaa', 'sox'],
    securityFeatures: ['basic', 'standard', 'high'],
    vendor: 'Google',
    license: 'open-source',
    documentationUrl: 'https://www.tensorflow.org/guide',
    githubUrl: 'https://github.com/tensorflow/tensorflow',
    websiteUrl: 'https://www.tensorflow.org/',
    integrationComplexity: 'complex',
    dependencies: ['numpy', 'protobuf'],
    alternatives: ['pytorch', 'jax'],
    popularityScore: 9,
    communitySize: 'very-large',
    lastUpdated: '2024-01-10'
  },
  {
    id: 'huggingface-transformers',
    name: 'Hugging Face Transformers',
    category: 'ml-framework',
    description: 'State-of-the-art transformer models for NLP, computer vision, and audio tasks',
    supportedLanguages: ['python'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'speech-recognition', 'generative-ai'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed'],
    deploymentTargets: ['cloud', 'on-premise', 'edge'],
    minBudgetRange: 'minimal',
    learningCurve: 'easy',
    maturityLevel: 'mature',
    latencyProfile: ['near-real-time', 'batch'],
    throughputProfile: ['low', 'medium', 'high'],
    supportedDataTypes: ['text', 'images', 'audio', 'multimodal'],
    supportedDataSizes: ['small', 'medium', 'large'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['basic', 'standard'],
    vendor: 'Hugging Face',
    license: 'open-source',
    documentationUrl: 'https://huggingface.co/docs/transformers/',
    githubUrl: 'https://github.com/huggingface/transformers',
    websiteUrl: 'https://huggingface.co/transformers/',
    integrationComplexity: 'simple',
    dependencies: ['pytorch', 'tensorflow'],
    alternatives: ['openai-api', 'anthropic-api'],
    popularityScore: 8,
    communitySize: 'large',
    lastUpdated: '2024-01-20'
  },

  // Model Serving
  {
    id: 'fastapi',
    name: 'FastAPI',
    category: 'model-serving',
    description: 'Modern, fast web framework for building APIs with automatic documentation',
    supportedLanguages: ['python'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'recommendation-systems', 'generative-ai'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'cloud-native'],
    deploymentTargets: ['cloud', 'on-premise'],
    minBudgetRange: 'minimal',
    learningCurve: 'easy',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time'],
    throughputProfile: ['medium', 'high'],
    supportedDataTypes: ['text', 'images', 'audio', 'tabular'],
    supportedDataSizes: ['small', 'medium', 'large'],
    complianceSupport: ['none', 'gdpr', 'hipaa'],
    securityFeatures: ['basic', 'standard', 'high'],
    vendor: 'Sebasti√°n Ramirez',
    license: 'open-source',
    documentationUrl: 'https://fastapi.tiangolo.com/',
    githubUrl: 'https://github.com/tiangolo/fastapi',
    websiteUrl: 'https://fastapi.tiangolo.com/',
    integrationComplexity: 'simple',
    dependencies: ['pydantic', 'starlette'],
    alternatives: ['flask', 'django-rest'],
    popularityScore: 8,
    communitySize: 'large',
    lastUpdated: '2024-01-18'
  },
  {
    id: 'torchserve',
    name: 'TorchServe',
    category: 'model-serving',
    description: 'Production-ready model serving framework for PyTorch models',
    supportedLanguages: ['python', 'java'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'speech-recognition', 'recommendation-systems'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed'],
    deploymentTargets: ['cloud', 'on-premise'],
    minBudgetRange: 'small',
    learningCurve: 'moderate',
    maturityLevel: 'stable',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['medium', 'high', 'very-high'],
    supportedDataTypes: ['text', 'images', 'audio', 'video'],
    supportedDataSizes: ['medium', 'large', 'very-large'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['standard', 'high'],
    vendor: 'Meta',
    license: 'open-source',
    documentationUrl: 'https://pytorch.org/serve/',
    githubUrl: 'https://github.com/pytorch/serve',
    websiteUrl: 'https://pytorch.org/serve/',
    integrationComplexity: 'moderate',
    dependencies: ['pytorch'],
    alternatives: ['tensorflow-serving', 'triton'],
    popularityScore: 7,
    communitySize: 'medium',
    lastUpdated: '2024-01-12'
  },

  // Data Storage
  {
    id: 'postgresql',
    name: 'PostgreSQL',
    category: 'data-storage',
    description: 'Advanced open-source relational database with excellent performance and reliability',
    supportedLanguages: ['python', 'javascript', 'java', 'cpp', 'go', 'rust'],
    supportedUseCases: ['recommendation-systems', 'fraud-detection', 'time-series-forecasting', 'content-moderation'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed'],
    deploymentTargets: ['cloud', 'on-premise', 'hybrid'],
    minBudgetRange: 'minimal',
    learningCurve: 'moderate',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['medium', 'high', 'very-high'],
    supportedDataTypes: ['tabular', 'text', 'time-series'],
    supportedDataSizes: ['small', 'medium', 'large', 'very-large'],
    complianceSupport: ['gdpr', 'hipaa', 'sox', 'pci-dss'],
    securityFeatures: ['standard', 'high', 'critical'],
    vendor: 'PostgreSQL Global Development Group',
    license: 'open-source',
    documentationUrl: 'https://www.postgresql.org/docs/',
    githubUrl: 'https://github.com/postgres/postgres',
    websiteUrl: 'https://www.postgresql.org/',
    integrationComplexity: 'moderate',
    dependencies: [],
    alternatives: ['mysql', 'mongodb'],
    popularityScore: 9,
    communitySize: 'very-large',
    lastUpdated: '2024-01-14'
  },
  {
    id: 'redis',
    name: 'Redis',
    category: 'data-storage',
    description: 'In-memory data structure store for caching and real-time applications',
    supportedLanguages: ['python', 'javascript', 'java', 'cpp', 'go', 'rust'],
    supportedUseCases: ['recommendation-systems', 'fraud-detection', 'natural-language-processing', 'computer-vision'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed'],
    deploymentTargets: ['cloud', 'on-premise', 'hybrid'],
    minBudgetRange: 'minimal',
    learningCurve: 'easy',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time'],
    throughputProfile: ['high', 'very-high'],
    supportedDataTypes: ['tabular', 'text'],
    supportedDataSizes: ['small', 'medium'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['basic', 'standard'],
    vendor: 'Redis Ltd.',
    license: 'open-source',
    documentationUrl: 'https://redis.io/docs/',
    githubUrl: 'https://github.com/redis/redis',
    websiteUrl: 'https://redis.io/',
    integrationComplexity: 'simple',
    dependencies: [],
    alternatives: ['memcached', 'hazelcast'],
    popularityScore: 8,
    communitySize: 'large',
    lastUpdated: '2024-01-16'
  },

  // Data Processing
  {
    id: 'pandas',
    name: 'Pandas',
    category: 'data-processing',
    description: 'Powerful data manipulation and analysis library for Python',
    supportedLanguages: ['python'],
    supportedUseCases: ['recommendation-systems', 'fraud-detection', 'time-series-forecasting', 'predictive-maintenance'],
    scalabilitySupport: ['single-machine'],
    deploymentTargets: ['cloud', 'on-premise'],
    minBudgetRange: 'minimal',
    learningCurve: 'easy',
    maturityLevel: 'mature',
    latencyProfile: ['batch', 'near-real-time'],
    throughputProfile: ['medium', 'high'],
    supportedDataTypes: ['tabular', 'time-series', 'text'],
    supportedDataSizes: ['small', 'medium'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['basic'],
    vendor: 'NumFOCUS',
    license: 'open-source',
    documentationUrl: 'https://pandas.pydata.org/docs/',
    githubUrl: 'https://github.com/pandas-dev/pandas',
    websiteUrl: 'https://pandas.pydata.org/',
    integrationComplexity: 'simple',
    dependencies: ['numpy'],
    alternatives: ['polars', 'dask'],
    popularityScore: 9,
    communitySize: 'very-large',
    lastUpdated: '2024-01-19'
  },
  {
    id: 'apache-spark',
    name: 'Apache Spark',
    category: 'data-processing',
    description: 'Unified analytics engine for large-scale data processing',
    supportedLanguages: ['python', 'java', 'r'],
    supportedUseCases: ['recommendation-systems', 'fraud-detection', 'time-series-forecasting', 'predictive-maintenance'],
    scalabilitySupport: ['multi-machine', 'distributed', 'cloud-native'],
    deploymentTargets: ['cloud', 'on-premise', 'hybrid'],
    minBudgetRange: 'medium',
    learningCurve: 'steep',
    maturityLevel: 'mature',
    latencyProfile: ['batch', 'near-real-time'],
    throughputProfile: ['high', 'very-high'],
    supportedDataTypes: ['tabular', 'time-series', 'text', 'graph'],
    supportedDataSizes: ['large', 'very-large'],
    complianceSupport: ['gdpr', 'hipaa', 'sox'],
    securityFeatures: ['standard', 'high'],
    vendor: 'Apache Software Foundation',
    license: 'open-source',
    documentationUrl: 'https://spark.apache.org/docs/',
    githubUrl: 'https://github.com/apache/spark',
    websiteUrl: 'https://spark.apache.org/',
    integrationComplexity: 'complex',
    dependencies: ['hadoop', 'scala'],
    alternatives: ['dask', 'ray'],
    popularityScore: 8,
    communitySize: 'large',
    lastUpdated: '2024-01-11'
  },

  // Monitoring
  {
    id: 'mlflow',
    name: 'MLflow',
    category: 'experiment-tracking',
    description: 'Open-source platform for managing the ML lifecycle including experimentation and deployment',
    supportedLanguages: ['python', 'r', 'java'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'recommendation-systems', 'time-series-forecasting'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'cloud-native'],
    deploymentTargets: ['cloud', 'on-premise', 'hybrid'],
    minBudgetRange: 'minimal',
    learningCurve: 'easy',
    maturityLevel: 'mature',
    latencyProfile: ['batch', 'flexible'],
    throughputProfile: ['low', 'medium'],
    supportedDataTypes: ['text', 'images', 'tabular', 'time-series'],
    supportedDataSizes: ['small', 'medium', 'large'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['basic', 'standard'],
    vendor: 'Databricks',
    license: 'open-source',
    documentationUrl: 'https://mlflow.org/docs/',
    githubUrl: 'https://github.com/mlflow/mlflow',
    websiteUrl: 'https://mlflow.org/',
    integrationComplexity: 'simple',
    dependencies: [],
    alternatives: ['wandb', 'neptune'],
    popularityScore: 7,
    communitySize: 'large',
    lastUpdated: '2024-01-17'
  },
  {
    id: 'prometheus',
    name: 'Prometheus',
    category: 'monitoring',
    description: 'Systems monitoring and alerting toolkit with time series database',
    supportedLanguages: ['python', 'javascript', 'java', 'go'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'recommendation-systems', 'fraud-detection'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed'],
    deploymentTargets: ['cloud', 'on-premise', 'hybrid'],
    minBudgetRange: 'minimal',
    learningCurve: 'moderate',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time'],
    throughputProfile: ['medium', 'high'],
    supportedDataTypes: ['time-series'],
    supportedDataSizes: ['medium', 'large'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['standard', 'high'],
    vendor: 'Prometheus Authors',
    license: 'open-source',
    documentationUrl: 'https://prometheus.io/docs/',
    githubUrl: 'https://github.com/prometheus/prometheus',
    websiteUrl: 'https://prometheus.io/',
    integrationComplexity: 'moderate',
    dependencies: [],
    alternatives: ['datadog', 'new-relic'],
    popularityScore: 8,
    communitySize: 'large',
    lastUpdated: '2024-01-13'
  },

  // Deployment & Infrastructure
  {
    id: 'docker',
    name: 'Docker',
    category: 'deployment',
    description: 'Containerization platform for packaging and deploying applications',
    supportedLanguages: ['python', 'javascript', 'java', 'cpp', 'go', 'rust'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'recommendation-systems', 'generative-ai'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed', 'cloud-native'],
    deploymentTargets: ['cloud', 'on-premise', 'edge', 'hybrid'],
    minBudgetRange: 'minimal',
    learningCurve: 'moderate',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['medium', 'high', 'very-high'],
    supportedDataTypes: ['text', 'images', 'audio', 'video', 'tabular'],
    supportedDataSizes: ['small', 'medium', 'large', 'very-large'],
    complianceSupport: ['gdpr', 'hipaa', 'sox', 'pci-dss'],
    securityFeatures: ['standard', 'high', 'critical'],
    vendor: 'Docker Inc.',
    license: 'freemium',
    documentationUrl: 'https://docs.docker.com/',
    githubUrl: 'https://github.com/docker',
    websiteUrl: 'https://www.docker.com/',
    integrationComplexity: 'moderate',
    dependencies: [],
    alternatives: ['podman', 'containerd'],
    popularityScore: 9,
    communitySize: 'very-large',
    lastUpdated: '2024-01-15'
  },
  {
    id: 'kubernetes',
    name: 'Kubernetes',
    category: 'orchestration',
    description: 'Container orchestration platform for automating deployment and scaling',
    supportedLanguages: ['python', 'javascript', 'java', 'go'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'recommendation-systems', 'generative-ai'],
    scalabilitySupport: ['multi-machine', 'distributed', 'cloud-native'],
    deploymentTargets: ['cloud', 'on-premise', 'hybrid'],
    minBudgetRange: 'medium',
    learningCurve: 'steep',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['high', 'very-high'],
    supportedDataTypes: ['text', 'images', 'audio', 'video', 'tabular'],
    supportedDataSizes: ['medium', 'large', 'very-large'],
    complianceSupport: ['gdpr', 'hipaa', 'sox', 'pci-dss', 'iso-27001'],
    securityFeatures: ['high', 'critical'],
    vendor: 'CNCF',
    license: 'open-source',
    documentationUrl: 'https://kubernetes.io/docs/',
    githubUrl: 'https://github.com/kubernetes/kubernetes',
    websiteUrl: 'https://kubernetes.io/',
    integrationComplexity: 'expert',
    dependencies: ['docker'],
    alternatives: ['docker-swarm', 'nomad'],
    popularityScore: 9,
    communitySize: 'very-large',
    lastUpdated: '2024-01-14'
  },

  // Cloud Services
  {
    id: 'aws-sagemaker',
    name: 'AWS SageMaker',
    category: 'model-training',
    description: 'Fully managed machine learning service for building, training, and deploying models',
    supportedLanguages: ['python', 'r'],
    supportedUseCases: ['natural-language-processing', 'computer-vision', 'recommendation-systems', 'time-series-forecasting'],
    scalabilitySupport: ['single-machine', 'multi-machine', 'distributed', 'cloud-native'],
    deploymentTargets: ['cloud'],
    minBudgetRange: 'medium',
    learningCurve: 'moderate',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time', 'batch'],
    throughputProfile: ['medium', 'high', 'very-high'],
    supportedDataTypes: ['text', 'images', 'audio', 'tabular', 'time-series'],
    supportedDataSizes: ['medium', 'large', 'very-large'],
    complianceSupport: ['gdpr', 'hipaa', 'sox', 'pci-dss'],
    securityFeatures: ['high', 'critical'],
    vendor: 'Amazon',
    license: 'commercial',
    documentationUrl: 'https://docs.aws.amazon.com/sagemaker/',
    websiteUrl: 'https://aws.amazon.com/sagemaker/',
    integrationComplexity: 'moderate',
    dependencies: ['aws-account'],
    alternatives: ['google-vertex-ai', 'azure-ml'],
    popularityScore: 8,
    communitySize: 'large',
    lastUpdated: '2024-01-18'
  },

  // Edge/Mobile
  {
    id: 'tensorflow-lite',
    name: 'TensorFlow Lite',
    category: 'deployment',
    description: 'Lightweight solution for mobile and embedded devices',
    supportedLanguages: ['python', 'java', 'swift', 'cpp'],
    supportedUseCases: ['computer-vision', 'natural-language-processing', 'speech-recognition'],
    scalabilitySupport: ['single-machine'],
    deploymentTargets: ['mobile', 'embedded', 'edge'],
    minBudgetRange: 'minimal',
    learningCurve: 'moderate',
    maturityLevel: 'mature',
    latencyProfile: ['real-time', 'near-real-time'],
    throughputProfile: ['low', 'medium'],
    supportedDataTypes: ['images', 'audio', 'text'],
    supportedDataSizes: ['small'],
    complianceSupport: ['none', 'gdpr'],
    securityFeatures: ['basic', 'standard'],
    vendor: 'Google',
    license: 'open-source',
    documentationUrl: 'https://www.tensorflow.org/lite',
    githubUrl: 'https://github.com/tensorflow/tensorflow/tree/master/tensorflow/lite',
    websiteUrl: 'https://www.tensorflow.org/lite',
    integrationComplexity: 'moderate',
    dependencies: ['tensorflow'],
    alternatives: ['pytorch-mobile', 'onnx-runtime'],
    popularityScore: 7,
    communitySize: 'medium',
    lastUpdated: '2024-01-12'
  }
];

// Helper functions for filtering components
export function getComponentsByCategory(category: string): StackComponent[] {
  return STACK_COMPONENTS.filter(component => component.category === category);
}

export function getComponentsByUseCase(useCase: string): StackComponent[] {
  return STACK_COMPONENTS.filter(component =>
    component.supportedUseCases.includes(useCase as any)
  );
}

export function getComponentsByLanguage(language: string): StackComponent[] {
  return STACK_COMPONENTS.filter(component =>
    component.supportedLanguages.includes(language as any)
  );
}

export function getComponentsByBudget(budgetRange: string): StackComponent[] {
  const budgetOrder = ['minimal', 'small', 'medium', 'large', 'enterprise'];
  const maxBudgetIndex = budgetOrder.indexOf(budgetRange);

  return STACK_COMPONENTS.filter(component => {
    const componentBudgetIndex = budgetOrder.indexOf(component.minBudgetRange);
    return componentBudgetIndex <= maxBudgetIndex;
  });
}

